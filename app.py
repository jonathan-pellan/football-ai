import jwt
import datetime
from fastapi import FastAPI, Query, Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import mysql.connector
import pymongo
from typing import Optional
from pydantic import BaseModel
from dotenv import dotenv_values

config = dotenv_values()

description = """
FootballPredictorApp API permet d'acc√©der √† des donn√©es sur les championnats de football fran√ßais. üöÄ

## √âquipe

On peut **lire** les √©quipes existantes.

## Joueurs

Il est possible de :

* ** Lire les entr√©es de joueurs de la bdd.

## Classements

Il est possible de :

* Lire les entr√©es de classements selon les param√®tres pr√©cis√©s
"""

app = FastAPI(title="FootballPredictorApp",
              description=description,
              summary="API pour acc√©der √† la base de donn√©es des r√©sultats des championnats fran√ßais",
              version="0.0.2",
              contact={
                "name": "Jonathan Pellan",
                "email": "jonathan.pellan@protonmail.com",
              })

# Configuration de la s√©curit√©
security = HTTPBearer()

# Mod√®le pour l'authentification
class TokenRequest(BaseModel):
    password: str
    duration: Optional[int] = 3600  # Dur√©e en secondes (1h par d√©faut)

def create_jwt(duration: int) -> str:
    """
    Fonction qui permet de g√©n√©rer un token JWT
    
    :param duration: Dur√©e de validit√© du token en secondes
    :return: Token JWT encod√©
    """
    expiration = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(seconds=duration)
    return jwt.encode(
        {"exp": expiration},
        config['SECRET_KEY'],
        algorithm="HS256"
    )

@app.post("/token")
def generate_token(request: TokenRequest):
    """
    Route qui permet de g√©n√©rer un token pour un utilisateur qui saisit son mot de passe
    
    :param request: Objet TokenRequest contenant le mot de passe et la dur√©e
    :return: Token JWT
    """
    if request.password != config['API_PASSWORD']:
        raise HTTPException(status_code=401, detail="Invalid password")
    token = create_jwt(request.duration)
    return {"token": token}

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """
    Fonction qui permet de v√©rifier le token JWT
    
    :param credentials: Credentials fournis via le bearer token
    :return: None
    :raises: HTTPException si le token est invalide ou expir√©
    """
    try:
        jwt.decode(credentials.credentials, config['SECRET_KEY'], algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

def get_db_connection():
    """
    Fonction qui permet de se connecter √† la base de donn√©es MySQL
    
    :return: Objet connexion √† la base de donn√©es
    """
    return mysql.connector.connect(
        host=config['MYSQL_HOST'],
        user=config['MYSQL_USER'],
        password=config['MYSQL_PASSWORD'],
        database="football_predictor"
    )

def get_mongodb_connection():
    """
    Fonction qui permet de se connecter √† la base de donn√©es MongoDB locale

    :return: Objet MongoClient
    """
    client = pymongo.MongoClient('localhost', 27017)
    return client

@app.get("/equipe")
async def get_team(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    name: Optional[str] = Query(None, alias="name"),
    id: Optional[int] = Query(None, alias="id"),
    limit: Optional[int] = Query(10, alias="limit")
):
    """
    Route qui permet de r√©cup√©rer les √©quipes en fonction de diff√©rents crit√®res
    
    - **credentials**: Credentials pour l'authentification
    - **name**: Nom approximatif de l'√©quipe recherch√©e
    - **id**: Identifiant unique de l'√©quipe
    - **limit**: Nombre d'√©quipes limite √† retourner

    *Renvoie la liste des √©quipes correspondant aux crit√®res*
    """
    # V√©rification du token
    await verify_token(credentials)
    
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)

    query = "SELECT * FROM Team WHERE 1=1"
    params = []

    if name:
        query += f" AND name LIKE '%{name}%'"
        #params.append(name)
    if id:
        query += " AND id = %s"
        params.append(id)

    query += " LIMIT %s"
    params.append(limit)

    cursor.execute(query, params)
    results = cursor.fetchall()

    cursor.close()
    connection.close()

    return results

@app.get("/joueurs")
async def get_players(
        credentials: HTTPAuthorizationCredentials = Depends(security),
        id : Optional[int] = Query(None, alias='id'),
        first_name : Optional[str] = Query(None, alias='prenom'),
        last_name : Optional[str] = Query(None, alias='nom'),
        birth_date : Optional[str] = Query(None, alias='naissance'),
        position : Optional[str] = Query(None, alias='position'),
        team : Optional[str] = Query(None, alias='equipe'),
        limit : Optional[int] = Query(30, alias='limit')
):
    """
    Route permettant de r√©cup√©rer les joueurs en fonction de diff√©rents crit√®res
    
    - **credentials**: Token d'authentification
    - **id**: Identifiant du joueur
    - **prenom**: Pr√©nom du joueur
    - **nom**: Nom de famille du joueur
    - **naissance**: Date de naissance du joueur (format : YYYY-MM-dd)
    - **position**: Position dans l'√©quipe (valeurs possibles : 'Gardien', 'Defenseur', 'Milieu', 'Attaquant')
    - **team**: Nom de l'√©quipe
    - **limit**: Nombre maximum de joueurs affich√©s (30 par d√©faut)

    *Renvoie la liste des joueurs correspondant aux crit√®res*
    """
    await verify_token(credentials)

    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = ""
    if team:
        query = f"SELECT Player.* FROM Player JOIN Team ON Player.team_id = Team.id WHERE (name LIKE '%{team}%' OR shortname LIKE '%{team}%')"
    else:
        query = "SELECT * FROM Player WHERE 1=1"
    params = []

    if id:
        query += " AND Player.id = %s"
        params.append(id)
    if first_name:
        query += " AND first_name = %s"
        params.append(first_name)
    if last_name:
        query += " AND last_name = %s"
        params.append(last_name)
    if birth_date:
        query += " AND birthdate = %s"
        params.append(birth_date)
    if position and position in ['Gardien', 'Defenseur', 'Milieu', 'Attaquant']:
        query += " AND position = %s"
        params.append(position)
    
    query += " LIMIT %s"
    params.append(limit)

    cursor.execute(query, params)
    results = cursor.fetchall()

    cursor.close()
    connection.close()
    return results

@app.get('/classements')
async def get_rankings(
        credentials: HTTPAuthorizationCredentials = Depends(security),
        season: Optional[int] = Query(None, alias='saison'),
        type_: Optional[str] = Query(None, alias='type'),
        team: Optional[str] = Query(None, alias='equipe'),
        league: Optional[str] = Query(None, alias='championnat'),
        limit: Optional[int] = Query(10, alias='limit')
):
    """
    Route permettant d'acc√©der aux historiques de classement

    - **credentials**: Token d'authentification
    - **season**: Ann√©e de d√©but de la saison (ex : pour 2022-2023, on utilise 2022)
    - **type_**: Type de classement ('TOTAL', 'HOME', 'AWAY')
    - **team**: Nom de l'√©quipe
    - **league**: Comp√©tition √† s√©lectionner
    - **limit**: Nombre maximum de r√©sultats (10 par d√©faut)

    *Renvoie la liste des classements correspondant √† la requ√™te*
    """
    await verify_token(credentials)

    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = ("SELECT position, league.name, league.season, team.name, type, played, goals_for, "
             "goals_against, won, draw, lost, points FROM `Ranking` JOIN `Team` ON Ranking.team_id = Team.id"
             " JOIN `League` ON Ranking.team_id = League.id WHERE 1=1")
    params = []

    if season:
        query += " AND League.season = %s"
        params.append(season)
    if team:
        query += " AND (Team.name LIKE '%%%s%' OR Team.shortname LIKE '%%%s%')"
        params.append(team)
        params.append(team)
    if league:
        query += " AND League.name = %s"
        params.append(league)
    if type_:
        query += " AND type = %s"
        params.append(type_)

    query += " LIMIT %s"
    params.append(limit)

    cursor.execute(query, params)
    results = cursor.fetchall()

    cursor.close()
    connection.close()
    return results

@app.get('/matches')
async def get_matches(
        credentials: HTTPAuthorizationCredentials = Depends(security),
        season: Optional[int] = Query(None, alias='saison'),
        matchday: Optional[int] = Query(None, alias='journee'),
        league: Optional[str] = Query(None, alias='championnat'),
        limit: Optional[int] = Query(10, alias='limit')
):
    """
    Route permettant d'acc√©der aux r√©sultats/affiches des matchs
    
    - **credentials** : Token d'authentification
    - **season** : Ann√©e de d√©but de la saison
    - **matchday** : Journ√©e √† s√©lectionner (entre 1 et 34 ou 38 selon la saison)
    - **league** : Championnat √† s√©lectionner ('Ligue 1' et 'Ligue 2')
    
    *Renvoie la liste des r√©sultats/affiches correspondant √† la requ√™te"""
    await verify_token(credentials)

    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    client = get_mongodb_connection()
    db = client['football_predictor']
    matches = db['matches']
    query = {}

    if season:
        query['season'] = str(f"{season}-{season+1}")
    if matchday:
        query['matchday'] = matchday
    if league and league in ['Ligue 1', 'Ligue 2']:
        query['league'] = league

    results_mongo = matches.find(query, projection={ '_id' : False }, limit=limit)
    results = list(results_mongo)
    client.close()
    return results

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)